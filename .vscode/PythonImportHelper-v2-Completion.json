[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "encoders",
        "importPath": "email",
        "description": "email",
        "isExtraImport": true,
        "detail": "email",
        "documentation": {}
    },
    {
        "label": "MIMEBase",
        "importPath": "email.mime.base",
        "description": "email.mime.base",
        "isExtraImport": true,
        "detail": "email.mime.base",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageEnhance",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageOps",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "DefaultAzureCredential",
        "importPath": "azure.identity",
        "description": "azure.identity",
        "isExtraImport": true,
        "detail": "azure.identity",
        "documentation": {}
    },
    {
        "label": "BlobServiceClient",
        "importPath": "azure.storage.blob",
        "description": "azure.storage.blob",
        "isExtraImport": true,
        "detail": "azure.storage.blob",
        "documentation": {}
    },
    {
        "label": "SecretClient",
        "importPath": "azure.keyvault.secrets",
        "description": "azure.keyvault.secrets",
        "isExtraImport": true,
        "detail": "azure.keyvault.secrets",
        "documentation": {}
    },
    {
        "label": "YOLO",
        "importPath": "ultralytics",
        "description": "ultralytics",
        "isExtraImport": true,
        "detail": "ultralytics",
        "documentation": {}
    },
    {
        "label": "azure.functions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "azure.functions",
        "description": "azure.functions",
        "detail": "azure.functions",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "execute_notebook",
        "kind": 2,
        "importPath": "benchmarking",
        "description": "benchmarking",
        "peekOfCode": "def execute_notebook(databricks_instance, token, notebook_path, car_id,\n                        car_number):\n    print(f'Executing notebook: {notebook_path} with car_id: {car_id}-{car_number}')\n    # API endpoint for running a notebook\n    url = f\"{databricks_instance}/api/2.0/jobs/runs/submit\"\n    # Define the payload for the API request\n    payload = {\n        \"run_name\": \"Car Query Run\",\n        \"existing_cluster_id\": \"0422-200925-pints678\",\n        \"notebook_task\": {",
        "detail": "benchmarking",
        "documentation": {}
    },
    {
        "label": "TEST_CARS",
        "kind": 5,
        "importPath": "benchmarking",
        "description": "benchmarking",
        "peekOfCode": "TEST_CARS = [\n    (\"BNSF\", \"238515\"),\n    (\"BNSF\", \"238571\"),\n    (\"BNSF\", \"238804\"),\n    (\"BNSF\", \"238805\"),\n    (\"BNSF\", \"238864\"),\n    (\"BNSF\", \"270598\"),\n    (\"BNSF\", \"270647\"),\n    (\"BNSF\", \"270846\"),\n    (\"DTTX\", \"459385\"),",
        "detail": "benchmarking",
        "documentation": {}
    },
    {
        "label": "NUM_RUNS",
        "kind": 5,
        "importPath": "benchmarking",
        "description": "benchmarking",
        "peekOfCode": "NUM_RUNS = 3  # Number of times to query each car\nresults = []\ndef execute_notebook(databricks_instance, token, notebook_path, car_id,\n                        car_number):\n    print(f'Executing notebook: {notebook_path} with car_id: {car_id}-{car_number}')\n    # API endpoint for running a notebook\n    url = f\"{databricks_instance}/api/2.0/jobs/runs/submit\"\n    # Define the payload for the API request\n    payload = {\n        \"run_name\": \"Car Query Run\",",
        "detail": "benchmarking",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "benchmarking",
        "description": "benchmarking",
        "peekOfCode": "results = []\ndef execute_notebook(databricks_instance, token, notebook_path, car_id,\n                        car_number):\n    print(f'Executing notebook: {notebook_path} with car_id: {car_id}-{car_number}')\n    # API endpoint for running a notebook\n    url = f\"{databricks_instance}/api/2.0/jobs/runs/submit\"\n    # Define the payload for the API request\n    payload = {\n        \"run_name\": \"Car Query Run\",\n        \"existing_cluster_id\": \"0422-200925-pints678\",",
        "detail": "benchmarking",
        "documentation": {}
    },
    {
        "label": "databricks_instance",
        "kind": 5,
        "importPath": "benchmarking",
        "description": "benchmarking",
        "peekOfCode": "databricks_instance = \"https://adb-2326721360835808.8.azuredatabricks.net\"\ndatabricks_token = \ndb_notebook_path = \"/Workspace/Users/kevin.morales@bnsf.com/optimized_train_detail\"\nfor car_id, car_number in TEST_CARS:\n    for i in range(NUM_RUNS):\n        start_time = time.time()\n        ntb_results = execute_notebook(databricks_instance, databricks_token, db_notebook_path, car_id, car_number)\n        ntb_results = json.loads(ntb_results[\"notebook_output\"][\"result\"].strip(\"'\"))[0]\n        try:\n            trn_id = ntb_results[\"trn_id\"]",
        "detail": "benchmarking",
        "documentation": {}
    },
    {
        "label": "databricks_token",
        "kind": 5,
        "importPath": "benchmarking",
        "description": "benchmarking",
        "peekOfCode": "databricks_token = \"dapi391e2e21c61adb340d5bdf76d9e361e2\"\ndb_notebook_path = \"/Workspace/Users/kevin.morales@bnsf.com/optimized_train_detail\"\nfor car_id, car_number in TEST_CARS:\n    for i in range(NUM_RUNS):\n        start_time = time.time()\n        ntb_results = execute_notebook(databricks_instance, databricks_token, db_notebook_path, car_id, car_number)\n        ntb_results = json.loads(ntb_results[\"notebook_output\"][\"result\"].strip(\"'\"))[0]\n        try:\n            trn_id = ntb_results[\"trn_id\"]\n            trn_dst_cty = ntb_results[\"dest_city_frefrm\"]",
        "detail": "benchmarking",
        "documentation": {}
    },
    {
        "label": "db_notebook_path",
        "kind": 5,
        "importPath": "benchmarking",
        "description": "benchmarking",
        "peekOfCode": "db_notebook_path = \"/Workspace/Users/kevin.morales@bnsf.com/optimized_train_detail\"\nfor car_id, car_number in TEST_CARS:\n    for i in range(NUM_RUNS):\n        start_time = time.time()\n        ntb_results = execute_notebook(databricks_instance, databricks_token, db_notebook_path, car_id, car_number)\n        ntb_results = json.loads(ntb_results[\"notebook_output\"][\"result\"].strip(\"'\"))[0]\n        try:\n            trn_id = ntb_results[\"trn_id\"]\n            trn_dst_cty = ntb_results[\"dest_city_frefrm\"]\n            trn_dest_st = ntb_results[\"dest_st\"]",
        "detail": "benchmarking",
        "documentation": {}
    },
    {
        "label": "benchmark_df",
        "kind": 5,
        "importPath": "benchmarking",
        "description": "benchmarking",
        "peekOfCode": "benchmark_df = pd.DataFrame(results)\n# Save to CSV\ncsv_filename = \"new_benchmark_results.csv\"\nbenchmark_df.to_csv(csv_filename, index=False)\nprint(f\"Benchmarking complete! Results saved to {csv_filename}\")",
        "detail": "benchmarking",
        "documentation": {}
    },
    {
        "label": "csv_filename",
        "kind": 5,
        "importPath": "benchmarking",
        "description": "benchmarking",
        "peekOfCode": "csv_filename = \"new_benchmark_results.csv\"\nbenchmark_df.to_csv(csv_filename, index=False)\nprint(f\"Benchmarking complete! Results saved to {csv_filename}\")",
        "detail": "benchmarking",
        "documentation": {}
    },
    {
        "label": "rrc_trigger",
        "kind": 2,
        "importPath": "function_app",
        "description": "function_app",
        "peekOfCode": "def rrc_trigger(myTimer: func.TimerRequest) -> None:\n    class Detection:\n        def __init__(self):\n            self.detection_data = {\n                \"Created at\": \"\",\n                \"Car ID\": \"\",\n                \"Intermodal Container ID\": \"\",\n                \"Camera ID\": \"\",\n            }\n            self.car_image = None",
        "detail": "function_app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "function_app",
        "description": "function_app",
        "peekOfCode": "app = func.FunctionApp()\n# Constants\nMAX_EMAIL_SIZE = 20 * 1024 * 1024  # 20MB\nCENTRAL_TZ = pytz.timezone(\"US/Central\")\nMOUNTAIN_TZ = pytz.timezone(\"US/Mountain\")\nUTC_TZ = pytz.utc\nTIMEZONES = {\n    \"Mountain\": MOUNTAIN_TZ,\n    \"Central\": CENTRAL_TZ,\n    \"UTC\": UTC_TZ,",
        "detail": "function_app",
        "documentation": {}
    },
    {
        "label": "MAX_EMAIL_SIZE",
        "kind": 5,
        "importPath": "function_app",
        "description": "function_app",
        "peekOfCode": "MAX_EMAIL_SIZE = 20 * 1024 * 1024  # 20MB\nCENTRAL_TZ = pytz.timezone(\"US/Central\")\nMOUNTAIN_TZ = pytz.timezone(\"US/Mountain\")\nUTC_TZ = pytz.utc\nTIMEZONES = {\n    \"Mountain\": MOUNTAIN_TZ,\n    \"Central\": CENTRAL_TZ,\n    \"UTC\": UTC_TZ,\n}\nMODEL_PATH = r\"/Users/kevinmorales/Documents/Work Stuff/azurerrc/azurerrc/azurerrc/last.pt\"",
        "detail": "function_app",
        "documentation": {}
    },
    {
        "label": "CENTRAL_TZ",
        "kind": 5,
        "importPath": "function_app",
        "description": "function_app",
        "peekOfCode": "CENTRAL_TZ = pytz.timezone(\"US/Central\")\nMOUNTAIN_TZ = pytz.timezone(\"US/Mountain\")\nUTC_TZ = pytz.utc\nTIMEZONES = {\n    \"Mountain\": MOUNTAIN_TZ,\n    \"Central\": CENTRAL_TZ,\n    \"UTC\": UTC_TZ,\n}\nMODEL_PATH = r\"/Users/kevinmorales/Documents/Work Stuff/azurerrc/azurerrc/azurerrc/last.pt\"\nLOCAL_RUN = True",
        "detail": "function_app",
        "documentation": {}
    },
    {
        "label": "MOUNTAIN_TZ",
        "kind": 5,
        "importPath": "function_app",
        "description": "function_app",
        "peekOfCode": "MOUNTAIN_TZ = pytz.timezone(\"US/Mountain\")\nUTC_TZ = pytz.utc\nTIMEZONES = {\n    \"Mountain\": MOUNTAIN_TZ,\n    \"Central\": CENTRAL_TZ,\n    \"UTC\": UTC_TZ,\n}\nMODEL_PATH = r\"/Users/kevinmorales/Documents/Work Stuff/azurerrc/azurerrc/azurerrc/last.pt\"\nLOCAL_RUN = True\nLOCAL_PASS_DIR = r'/Users/kevinmorales/Downloads/2025-03-12 1415_1424'",
        "detail": "function_app",
        "documentation": {}
    },
    {
        "label": "UTC_TZ",
        "kind": 5,
        "importPath": "function_app",
        "description": "function_app",
        "peekOfCode": "UTC_TZ = pytz.utc\nTIMEZONES = {\n    \"Mountain\": MOUNTAIN_TZ,\n    \"Central\": CENTRAL_TZ,\n    \"UTC\": UTC_TZ,\n}\nMODEL_PATH = r\"/Users/kevinmorales/Documents/Work Stuff/azurerrc/azurerrc/azurerrc/last.pt\"\nLOCAL_RUN = True\nLOCAL_PASS_DIR = r'/Users/kevinmorales/Downloads/2025-03-12 1415_1424'\nLOG_FILE = \"inference_log.csv\"",
        "detail": "function_app",
        "documentation": {}
    },
    {
        "label": "TIMEZONES",
        "kind": 5,
        "importPath": "function_app",
        "description": "function_app",
        "peekOfCode": "TIMEZONES = {\n    \"Mountain\": MOUNTAIN_TZ,\n    \"Central\": CENTRAL_TZ,\n    \"UTC\": UTC_TZ,\n}\nMODEL_PATH = r\"/Users/kevinmorales/Documents/Work Stuff/azurerrc/azurerrc/azurerrc/last.pt\"\nLOCAL_RUN = True\nLOCAL_PASS_DIR = r'/Users/kevinmorales/Downloads/2025-03-12 1415_1424'\nLOG_FILE = \"inference_log.csv\"\n@app.timer_trigger(schedule=\"0 */1 * * * *\", arg_name=\"myTimer\",",
        "detail": "function_app",
        "documentation": {}
    },
    {
        "label": "MODEL_PATH",
        "kind": 5,
        "importPath": "function_app",
        "description": "function_app",
        "peekOfCode": "MODEL_PATH = r\"/Users/kevinmorales/Documents/Work Stuff/azurerrc/azurerrc/azurerrc/last.pt\"\nLOCAL_RUN = True\nLOCAL_PASS_DIR = r'/Users/kevinmorales/Downloads/2025-03-12 1415_1424'\nLOG_FILE = \"inference_log.csv\"\n@app.timer_trigger(schedule=\"0 */1 * * * *\", arg_name=\"myTimer\",\n                   run_on_startup=False, use_monitor=False)\ndef rrc_trigger(myTimer: func.TimerRequest) -> None:\n    class Detection:\n        def __init__(self):\n            self.detection_data = {",
        "detail": "function_app",
        "documentation": {}
    },
    {
        "label": "LOCAL_RUN",
        "kind": 5,
        "importPath": "function_app",
        "description": "function_app",
        "peekOfCode": "LOCAL_RUN = True\nLOCAL_PASS_DIR = r'/Users/kevinmorales/Downloads/2025-03-12 1415_1424'\nLOG_FILE = \"inference_log.csv\"\n@app.timer_trigger(schedule=\"0 */1 * * * *\", arg_name=\"myTimer\",\n                   run_on_startup=False, use_monitor=False)\ndef rrc_trigger(myTimer: func.TimerRequest) -> None:\n    class Detection:\n        def __init__(self):\n            self.detection_data = {\n                \"Created at\": \"\",",
        "detail": "function_app",
        "documentation": {}
    },
    {
        "label": "LOCAL_PASS_DIR",
        "kind": 5,
        "importPath": "function_app",
        "description": "function_app",
        "peekOfCode": "LOCAL_PASS_DIR = r'/Users/kevinmorales/Downloads/2025-03-12 1415_1424'\nLOG_FILE = \"inference_log.csv\"\n@app.timer_trigger(schedule=\"0 */1 * * * *\", arg_name=\"myTimer\",\n                   run_on_startup=False, use_monitor=False)\ndef rrc_trigger(myTimer: func.TimerRequest) -> None:\n    class Detection:\n        def __init__(self):\n            self.detection_data = {\n                \"Created at\": \"\",\n                \"Car ID\": \"\",",
        "detail": "function_app",
        "documentation": {}
    },
    {
        "label": "LOG_FILE",
        "kind": 5,
        "importPath": "function_app",
        "description": "function_app",
        "peekOfCode": "LOG_FILE = \"inference_log.csv\"\n@app.timer_trigger(schedule=\"0 */1 * * * *\", arg_name=\"myTimer\",\n                   run_on_startup=False, use_monitor=False)\ndef rrc_trigger(myTimer: func.TimerRequest) -> None:\n    class Detection:\n        def __init__(self):\n            self.detection_data = {\n                \"Created at\": \"\",\n                \"Car ID\": \"\",\n                \"Intermodal Container ID\": \"\",",
        "detail": "function_app",
        "documentation": {}
    }
]